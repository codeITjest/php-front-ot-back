on the gitbash type npm install -g express then npm init

desc; simple bookstore app



on your text editor open the folder of your project and on package.json type
----------------------------------------------------------------------------------------
PACKAGE.JSON
before author type

1	"dependencies": {
1	    "express": "*",
1	   "body-parser": "*",
 1	   "mongoose": "*"
 1	 },

----------------------------------------------------------------------------------------
go back to gitbash type npm install

2	open APP.JS
----------------------------------------------------------------------------------------
	APP.JS
2	const express = require('express');
2	const app = express();
2	const bodyParser = require('body-parser');
2	const mongoose = require('mongoose');

32	//Static Folder
32	app.use(express.static(__dirname+'/client'));  //GO TO THE PROJECT FOLDER AND CREATE THE CLIENT FOLDER  inside the folder create 3 folders (controllers, css, views) and INSIDE THE client FOLDER CREATE app.js, index.html , INSIDE controllers FOLDER create books.js and genres.js  , INSIDE views FOLDER CREATE books.html and book_details.html, add_book.html and edit_book.html, INSIDE css FOLDER CREATE FILE style.css 
 33	OPEN INDEX.HTML   //GO TO THE BOTTOM

2	//Middleware
2	app.use(bodyParser.json());

2	//Connect to mongoose
2	mongoose.connect('mongodb://localhost/bookstore');
2	const db = mongoose.connection;

11	//include genre.js
11	Genre = require('./models/genre');
15	Book = require('./models/book');  //GO TO BOOK.JS BELOW

2	//ROUTES
2	app.get('/', function(req, res){
2		res.send('Please use /api/books or /api/genres');
2	});



9	CREATE ROUTE
9	//GENRES ROUTE
9	app.get('/api/genres', function(req, res){

11	     Genre.getGenres(function(err, genres){
11		if(err){
11			throw err;
11		}
11		res.json(genres);
11	     });

19	/POST GENRE ROUTE
19	app.post('/api/genres', function(req, res){
19		const genre = req.body;
19		Genre.addGenre(genre, function(err, genre){
19			if(err){
19				throw err;
19			}
19			res.json(genre);
19		});   //TEST THIS WITH RESTEASY  copy the url into resteasy http://localhost:3000/api/genres   it should give 200 status meaning OK  //GO BELOW FOR 20

25	//UPDATE GENRE ROUTE
25	app.put('/api/genres/:_id', function(req, res){
25		const id = req.params._id;
25		const genre = req.body;
25		Genre.updateGenre(id, genre, {}, function(err, genre){
25			if(err){
25				throw err;
25			}
25			res.json(genre);
25		});   //GO TO RESTEASY TO TEST   //then GO DOWN FOR BOOKS

29	//DELETE GENRE ROUTE
29	app.delete('/api/genres/:_id', function(req, res){
29		const id = req.params._id;
29		Genre.removeGenre(id, function(err, genre){
29			if(err){
29				throw err;
29			}
29			res.json(genre);
29		});
29	});   //GO TO RESTEASY TO TEST //THEN GO TO BOOK.JS BELOW 

14	COPY app.get() above
14	//BOOKS ROUTE
14	app.get('/api/books', function(req, res){
14		Book.getBooks(function(err, books){
14			if(err){
14				throw err;
14			}
14			res.json(books);
14		});
14	});  /GO UP TO 15

17	//BOOK_ID ROUTE
17	app.get('/api/books/:_id', function(req, res){
17		Book.getBookById(req.params._id, function(err, book){
17			if(err){
17				throw err;
17			}
17			res.json(book);
17		});
17	});  //ADD A BOOK GO TO GENRE.JS BELOW


12	//CREATE BOOK MODEL IN BOOK.JS BELOW copy every from genre.js
9	});   

23	//POST BOOK ROUTE
23	app.post('/api/books', function(req, res){
23		const book = req.body;
23		Book.addBook(book, function(err, book){
23			if(err){
23				throw err;
23			}
23			res.json(book);
23		});
23	});  // GO TO RESTEASY TO POST BOOK BELOW


26	//UPDATE BOOK ROUTE
26	app.put('/api/books/:_id', function(req, res){
26		const id = req.params._id;
26		const book = req.body;
26		Book.updateBook(id, book, {}, function(err, book){
26			if(err){
26				throw err;
26			}
26			res.json(book);
26		});
26	});  //GO TO BOOK.JS BELOW

31	//DELETE BOOK ROUTE
31	app.delete('/api/books/:_id', function(req, res){
31		const id = req.params._id;
31		Book.removeBook(id, function(err, book){
31			if(err){
31				throw err;
31			}
31			res.json(book);
31		});
31	}); //test   //GO UP FOR STATIC FOLDER


2	//addListener
2	app.listen(3000, function(){
2		console.log('Now listening for requests');
2	});


10 CREATE A MODEL FOLDER ON THE BOOKSTORE THEN INSIDE THE MODELS CREATE 2 FILES GENRE.JS AND BOOK.JS
=================================================

GENRE.JS
---------------------------------------------------------------------------------------
10	const mongoose = require('mongoose');

10	//Genre Schema
10	const genreSchema = mongoose.Schema({
10		name:{
10			type: String,
10			required: true
10		},
10		create_date:{
10			type: Date,
10			default: Date.now
10		}
10	}); 

10	const Genre = module.exports = mongoose.model('Genre', genreSchema);

10	//function to get Genres
10	module.exports.getGenres = function(callback, limit){
10		Genre.find(callback).limit(limit);
10	}    //GO BVACK TO APP.JS ABOVE


18	//Add Genre
18	module.exports.addGenre = function(genre, callback){
18		Genre.create(genre, callback);
18	}   //GO TO APP.JS ABOVE

24	/Update Genre
24	module.exports.updateGenres = function(id, genre, options, callback){
24		//create query
24		const query = {_id: id};
24		const update = {
24			name: genre.name
24		};
24		Genre.findOneAndUpdate(query, update, options,  callback);
24	}   //GO BACK TO APP.JS ABOVE

28	//delete Genre
28	module.exports.removeGenre = function(id, callback){
28		const query = {_id: id};
28		Genre.remove(query, callback);
28	}   //GO BACK TO APP.JS ABOVE

=================================================
3	 on the terminal type node app
 or npm install -g nodemon
nodemon

4 	ADD DATABASE   run cmd as administrator
	cd /
	cd Program Files
	cd MongoDB
	cd Server
	cd 4.2/bin
	mongo hit enter

5	show dbs
6	//create dbs   use bookstore
6	//create collections db.createCollection('books')
6	//create collections db.createCollection('genres')

7	open amazon.com then look for books
7	//create a genre: Web Development ^ Design
7	go to cmd and type db.genres.insert({name: 'Web Development & Design'})
7	db.genres.insert({name: 'Programming Languages'})

8	add book	 db.books.insert({title: '', genre: '', description: '', author: '', publisher: '', pages: '', image_url: '', buy_url: ''})

9	 go to app.js above

----------------------------------------------------------------------------------------
BOOK.JS
----------------------------------------------------------------------------------------
12	const mongoose = require('mongoose');

12	//Book Schema
12	const bookSchema = mongoose.Schema({
12		title:{
12			type: String,
12			required: true
12		},

13		genre:{
13			type: String,
13			required: true
13		},
13		description:{
13			type: String
13		},
13		author:{
13			type: String,
13			required: true
13		},
13		publisher:{
13			type: String
13		},
13		pages:{
13			type: String
13		},
13		image_url:{
13			type: String
13		},
13		buy_url:{
13			type: String
13		},   //GO TO APP.JS ABOVE

12		create_date:{
12			type: Date,
12			default: Date.now
12		}
12`	}); 

12	const Book = module.exports = mongoose.model('Book', bookSchema);

12	//function to get Books
12	module.exports.getBooks = function(callback, limit){
12		Book.find(callback).limit(limit);
12	}

16	/Get Book
16	module.exports.getBookById = function(id, callback){
16		Book.findById(id, callback);
16	}   //GO TO APP.JS ABOVE

22	//Add Book
22	module.exports.addBook = function(book, callback){
22		Book.create(book, callback);
22	}  //GO TO APP.JS ABOVE


27	//Update Book
27	module.exports.updateBook = function(id, book, options, callback){
27		//create query
27		const query = {_id: id};
27		const update = {
27			title: book.title,
27			genre: book.genre,
27			description: book.description,
27			author: book.author,
27			publisher: book.publisher,
27			pages: book.pages,
27			image_url: book.image_url,
27			buy_url: book.buy_url
27		};
27		Book.findOneAndUpdate(query, update, options, callback);
27	}   //GO TO RESTEASY   // go to GENRE.JS ABOVE TO DELETE DATA

30	//delete Book
30	module.exports.removeBook = function(id, callback){
30		const query = {_id: id};
30		Book.remove(query, callback);
30	}  //GO TO APP.JS ABOVE
=================================================

20	ON THE RESTEASY 
20	TRY to make POST

20	Headers: content-type - application/json
20	Body  
20	{
20		"name": "Romance"
20	}

20	Send

20	go to mongoshell  type db.genres.find().pretty()


21	go to genre.js and copy //Add genre and go to book.js above


24	http://localhost:3000/api/books
POST
HEADERS content-type application/json 
body 
{
	"title": "Gardner's Art through the Ages: The Western Perspective"
}


/25	UPDATE DATA GO TO GENRE.JS ABOVE


--------------------------------------------------------------------------------------------------
	INDEX.HTML
--------------------------------------------------------------------------------------------------

33  go to terminal and type npm install after running then type npm install -g bower  after installation type cd client then type bower install --save bootstrap angular angular-route jquery  after installation type cd .. 


34	<!DOCTYPE html>
34	<html>  //38 insert ng-app="myApp"   //39 OPEN APP.JS BELOW
34	<head>
34		<title>Bookstore</title>
34		<link rel="stylesheet" href="bower_components/bootstrap/dist/css/bootstrap.css">
34		<link rel="stylesheet" type="text/css" href="css/style.css">
34	</head>
34	<body>

35		/* navbar
		<nav class="navbar navbar-expand-lg navbar-light bg-light">
	  	     <a class="navbar-brand" href="#">Bookstore</a>
	  	          <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
	    	                <span class="navbar-toggler-icon"></span>
	  	          </button>

	  	       <div class="collapse navbar-collapse" id="navbarSupportedContent">
	    		<ul class="navbar-nav mr-auto">
	      			<li class="nav-item active"><a class="nav-link" href="#/books/add">Add Book<span class="sr-only">(current)</span></a></li>
	  	       </div>
		</nav>
35		*/ End of Navbar

36		<div class="container">
36		 	<div class="row">
36		 		<div class="col-md-12">		37	                                     		<!--angular directive-->
37	 				<div ng-view></div>
36		 		</div>
36		 	</div>
36		 </div>

34		<script src="/bower_components/jquery/dist/jquery.js"></script>
34		<script src="/bower_components/angular/angular.js"></script>
34		<script src="/bower_components/angular-route/angular-route.js"></script>
34		<script src="/app.js"></script>
34		<script src="/controllers/books.js"></script>
34		<script src="/controllers/genres.js"></script>
34	</body>
34	</html>	



--------------------------------------------------------------------------------------------------
APP.JS inside CLIENT FOLDER VIEWS FOLDER
--------------------------------------------------------------------------------------------------
39  	const myApp = angular.module('myApp', ['ngRoute']);

39	//Set up all routes
39	myApp.config(function($routeProvider){
39		$routeProvider.when('/', {
39			controller: 'BooksController',
39			templateUrl: 'views/books.html'
39		})
39		.when('/books', {
39			controller: 'BooksController',
39			templateUrl: 'views/books.html'
39		})
39		//Individual book
39		.when('/books/details/:id', {
39			controller: 'BooksController', 
39			templateUrl: 'views/book_details.html'
39		})
39		.when('/books/add', {
39			controller: 'BooksController', 
39			templateUrl: 'views/add_book.html'
39		})
39		.when('/books/edit/:id', {
39			controller: 'BooksController', 
39			templateUrl: 'views/edit_book.html'
39		})
39		.otherwise({
39			redirectTo: '/'
39		});
39	});   //GO TO CONTROLLERS BOOK.JS BELOW

-------------------------------------------------------------------------------------------------
BOOK.JS
-------------------------------------------------------------------------------------------------
40	const myApp = angular.module('myApp');

40	myApp.controller('BooksController', ['$scope', '$http', '$location', '$routeParams', function($scope, $http, $location, $routeParams){
41		//test the controller
41	console.log('BooksController Loaded');  load th page and crtl+shift+j

40		//Scope Function
40		$scope.getBooks = function(){
40			//Http module
40			$http.get('/api/books').success(function(response){
40				$scope.books = response;
40			});
40		}
40	}]);   41 before // GO TO VIEWS BOOKS.HTML BELOW

--------------------------------------------------------------------------------------------------
BOOKS.HTML
--------------------------------------------------------------------------------------------------
42	


